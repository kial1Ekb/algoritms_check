"""
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–æ–¥–∏—Ç –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–∏—Å–∫–∞
–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –¥–≤–æ–∏—á–Ω–æ–º –¥–µ—Ä–µ–≤–µ –ø–æ–∏—Å–∫–∞. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –¥–≤–æ–∏—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–æ–∏—Å–∫–∞, –≤—ã–ø–æ–ª–Ω—è—Ç—å
–ø–æ–∏—Å–∫ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –∏–∑–º–µ—Ä—è—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.
"""

import random
import time

class TreeNode:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key

def insert(root, key):
    """ –í—Å—Ç–∞–≤–∫–∞ –∫–ª—é—á–∞ –≤ –¥–≤–æ–∏—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–æ–∏—Å–∫–∞ """
    if root is None:
        return TreeNode(key)
    else:
        if root.val < key:
            root.right = insert(root.right, key)
        else:
            root.left = insert(root.left, key)
    return root

def search(root, key):
    """ –ü–æ–∏—Å–∫ –∫–ª—é—á–∞ –≤ –¥–≤–æ–∏—á–Ω–æ–º –¥–µ—Ä–µ–≤–µ –ø–æ–∏—Å–∫–∞ """
    if root is None or root.val == key:
        return root
    if root.val < key:
        return search(root.right, key)
    return search(root.left, key)

def create_random_bst(n):
    """ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–≤–æ–∏—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–∏—Å–∫–∞ """
    root = None
    for _ in range(n):
        key = random.randint(1, 100)
        root = insert(root, key)
    return root

def measure_search_time(root, key):
    """ –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ """
    start_time = time.time()
    node = search(root, key)
    elapsed_time = time.time() - start_time
    if node:
        print(f"–≠–ª–µ–º–µ–Ω—Ç {key} –Ω–∞–π–¥–µ–Ω.")
    else:
        print(f"–≠–ª–µ–º–µ–Ω—Ç {key} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    print(f"–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {elapsed_time:.6f} —Å–µ–∫—É–Ω–¥.")

def main():
    n = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –¥–µ—Ä–µ–≤–µ: "))
    key = int(input("–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞: "))
    root = create_random_bst(n)
    measure_search_time(root, key)

if __name__ == "__main__":
    main()



"""
–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ –≤ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–≤–æ–∏—á–Ω–æ–º –¥–µ—Ä–µ–≤–µ –ø–æ–∏—Å–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 
ùëÇ(logùëõ)
O(logn), –æ–¥–Ω–∞–∫–æ –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ (–∫–æ–≥–¥–∞ –¥–µ—Ä–µ–≤–æ –≤—ã—Ä–æ–∂–¥–∞–µ—Ç—Å—è –≤ —Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫) –æ–Ω–∞ –º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å 
ùëÇ(ùëõ). –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –µ–≥–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å, —á—Ç–æ –º–æ–∂–µ—Ç –æ—Ç—Ä–∞–∑–∏—Ç—å—Å—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∏—Å–∫–∞.
"""