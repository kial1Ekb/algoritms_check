"""
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ —è–∑—ã–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–¥–µ–ª–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –º–∞—à–∏–Ω—ã –¢—å—é—Ä–∏–Ω–≥–∞ –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è
–¥–≤—É—Ö —á–∏—Å–µ–ª. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–≤–æ–¥–∞, –∑–∞–ø—É—Å–∫–∞—Ç—å –º–∞—à–∏–Ω—É –¢—å—é—Ä–∏–Ω–≥–∞ –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏—Ç—å
—Ä–µ–∑—É–ª—å—Ç–∞—Ç.
"""

"""
–û–ø–∏—Å–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:
–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ 
ùëé
a –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–æ –Ω–∞ –ª–µ–Ω—Ç–µ 
ùëè
b —Ä–∞–∑, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω–æ–µ –∑–Ω–∞–∫–∞–º–∏ "+".
–†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–æ–±–æ–π –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –Ω–∞ –ª–µ–Ω—Ç–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–∞–≤–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é 
ùëé
√ó
ùëè
a√ób.
"""


def turing_machine_multiply(a, b):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–µ–Ω—Ç—ã
    tape = []

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ª–µ–Ω—Ç—É: a —Ä–∞–∑ –ø–æ b –µ–¥–∏–Ω–∏—Ü, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –∑–Ω–∞–∫–æ–º "+"
    for _ in range(a):
        tape.extend(['1'] * b + ['+'])

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–Ω–∞–∫ "+", —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ª–∏—à–Ω–∏–π
    tape.pop()

    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –Ω–∞ –ª–µ–Ω—Ç–µ, —á—Ç–æ —Ä–∞–≤–Ω–æ a * b
    result = tape.count('1')

    # –í—ã–≤–æ–¥–∏–º –ª–µ–Ω—Ç—É (–¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏, —á—Ç–æ –Ω–∞ –ª–µ–Ω—Ç–µ) –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("–õ–µ–Ω—Ç–∞:", ''.join(tape))
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è:", result)



a = int(input("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ (a): "))
b = int(input("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ (b): "))


turing_machine_multiply(a, b)
